using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace ThreadLike.Chat.Infrastructure.Database.Migrations
{
    /// <inheritdoc />
    public partial class Update_Database_2 : Migration
    {
		private const string _triggerFunctionName = "update_group_last_message()";
		/// <inheritdoc />
		protected override void Up(MigrationBuilder migrationBuilder)
        {


            migrationBuilder.AddColumn<string>(
                name: "LastMessage",
                schema: "chat",
                table: "Groups",
                type: "jsonb",
                nullable: true);

			migrationBuilder.Sql($"""
				CREATE OR REPLACE FUNCTION {ChatDbContext.Schema}.{_triggerFunctionName}
				RETURNS TRIGGER AS $$
				BEGIN
				    UPDATE {ChatDbContext.Schema}."Groups"
				    SET "LastMessage" = jsonb_build_object(
				        'SenderId', NEW."SenderId",
				        'IsAutoGenerated', false,
				        'Content', NEW."Content",
				        'ReaderIds', jsonb_build_array(NEW."SenderId")--'[]'::jsonb
				    )
				    WHERE "Id" = NEW."GroupId";
				    RETURN NEW;
				END;
				$$ LANGUAGE plpgsql;
				""");
			migrationBuilder.Sql($"""
				CREATE TRIGGER after_message_insert
				AFTER INSERT ON chat."Message"
				FOR EACH ROW
				EXECUTE FUNCTION {ChatDbContext.Schema}.{_triggerFunctionName};
				""");

		}

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "LastMessage",
                schema: "chat",
                table: "Groups");
			
			migrationBuilder.Sql($"""
				DROP FUNCTION {ChatDbContext.Schema}.{_triggerFunctionName} cascade;
				""");
		}
    }
}
